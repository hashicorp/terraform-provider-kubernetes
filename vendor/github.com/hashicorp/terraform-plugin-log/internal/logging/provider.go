package logging

import (
	"context"

	"github.com/hashicorp/go-hclog"
)

// GetProviderRootLogger returns the root logger used for writing logs
// from a provider. If no root logger has been created, it will return nil.
func GetProviderRootLogger(ctx context.Context) hclog.Logger {
	logger := ctx.Value(ProviderRootLoggerKey)
	if logger == nil {
		return nil
	}
	return logger.(hclog.Logger)
}

// SetProviderRootLogger sets `logger` as the root logger used for writing
// logs from a provider.
func SetProviderRootLogger(ctx context.Context, logger hclog.Logger) context.Context {
	return context.WithValue(ctx, ProviderRootLoggerKey, logger)
}

// NewProviderSubsystemLoggerWarning is the text included in log output when a
// subsystem is auto-generated by terraform-plugin-log because it was used
// before the provider instantiated it.
const NewProviderSubsystemLoggerWarning = "This log was generated by a subsystem logger that wasn't created before being used. Use tflog.NewSubsystem to create this logger before it is used."

// GetProviderSubsystemLogger returns the subsystem logger for the named
// subsystem in provider space. If no such subsystem logger has been created,
// it will return nil.
func GetProviderSubsystemLogger(ctx context.Context, subsystem string) hclog.Logger {
	logger := ctx.Value(ProviderRootLoggerKey + loggerKey("."+subsystem))
	if logger == nil {
		return nil
	}
	return logger.(hclog.Logger)
}

// SetProviderSubsystemLogger sets `logger` as the logger for the named
// subsystem in provider space.
func SetProviderSubsystemLogger(ctx context.Context, subsystem string, logger hclog.Logger) context.Context {
	return context.WithValue(ctx, ProviderRootLoggerKey+loggerKey("."+subsystem), logger)
}
