// Code generated by hashicorp/terraform-plugin-codegen-kubernetes; THIS FILE IS FOR YOU TO EDIT
//
// This file contains function signatures for implementing CRUD hooks.
// You need to provide the implementation for these functions.
//
// This code was written by a robot on Oct 22, 2024 15:41:40 UTC.

package corev1

import (
	"context"
	"time"

	"github.com/cenkalti/backoff/v4"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-provider-kubernetes/internal/framework/helper"
	"github.com/hashicorp/terraform-provider-kubernetes/internal/framework/provider/client"
	"k8s.io/apimachinery/pkg/api/errors"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func (r *Namespace) AfterCreate(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse, m *NamespaceModel) {
	if helper.DynamicToBool(m.WaitForDefaultServiceAccount) {
		resourceInterface, err := client.ResourceInterface(r.clientGetter, "ServiceAccount", "v1", m.Metadata.Name.String())
		if err != nil {
			resp.Diagnostics.AddError("Error getting service account client", err.Error())
			return
		}

		err = backoff.Retry(func() error {
			if _, err := resourceInterface.Get(ctx, "default", v1.GetOptions{}); !errors.IsNotFound(err) {
				return backoff.Permanent(err)
			}
			return nil
		}, backoff.WithContext(backoff.NewConstantBackOff(100*time.Millisecond), ctx))

		if err != nil {
			resp.Diagnostics.AddError("Error waiting for default service account", err.Error())
			return
		}
	}
}
