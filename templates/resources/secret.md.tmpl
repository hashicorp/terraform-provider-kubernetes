---
subcategory: "core/v1"
page_title: "Kubernetes: kubernetes_secret"
description: |-
  The resource provides mechanisms to inject containers with sensitive information while keeping containers agnostic of Kubernetes.
---

# {{ .Name }}

The resource provides mechanisms to inject containers with sensitive information, such as passwords, while keeping containers agnostic of Kubernetes. Secrets can be used to store sensitive information either as individual properties or coarse-grained entries like entire files or JSON blobs. The resource will by default create a secret which is available to any pod in the specified (or default) namespace.

~> Read more about security properties and risks involved with using Kubernetes secrets: [Kubernetes reference](https://kubernetes.io/docs/concepts/configuration/secret/#information-security-for-secrets)

~> **Note:** All arguments including the secret data will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).

{{ .SchemaMarkdown }}

## Example Usage

{{tffile "examples/resources/secret/example_1.tf"}}

## Example Usage (Docker config)

### Docker config file

{{tffile "examples/resources/secret/example_2.tf"}}

### Username and password

{{tffile "examples/resources/secret/example_3.tf"}}

This is equivalent to the following kubectl command:

```sh
$ kubectl create secret docker-registry docker-cfg --docker-server=${registry_server} --docker-username=${registry_username} --docker-password=${registry_password} --docker-email=${registry_email}
```

## Example Usage (Service account token)

{{tffile "examples/resources/secret/example_4.tf"}}

## Import

Secret can be imported using its namespace and name, e.g.

```
$ terraform import kubernetes_secret.example default/my-secret
```
